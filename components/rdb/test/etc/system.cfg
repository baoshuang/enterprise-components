export = libPath, dllPath, logDest, logPath, logRotate, logLevel, eventPath
#---------------------------------- paths ------------------------------------#
etcPath = ${EC_SYS_PATH}/bin/ec/components/rdb/test/etc/
binPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}
libPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}, ${EC_SYS_PATH}/bin/ec/libraries/
dllPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}, ${EC_SYS_PATH}/bin/ec/libraries/
dataPath = ${EC_SYS_PATH}/data/test/rdbTest/${EC_COMPONENT_ID}
logPath = ${EC_SYS_PATH}/log/test/rdbTest/${EC_COMPONENT_ID}
eventPath = ${EC_SYS_PATH}/data/test/rdbTest/shared/events/
#---------------------------------- process ----------------------------------#
basePort = 18000
startWait = 1
stopWait = 1
cpuAffinity = 0
#---------------------------------- logging ----------------------------------#
logLevel = INFO
logDest = FILE,STDERR
logRotate = 01:00:00
#---------------------------------- housekeeping -----------------------------#
housekeeping = ()
#---------------------------------- components -------------------------------#
[group:t]
  [[t.run]]
    command = "q qtestRunner.q"
    type = q:qtest/qtestRunner
    port = ${basePort}
    memCap = 10000
    testFiles = ${EC_SYS_PATH}/bin/ec/components/rdb/test/rdb_functionalTests.q, ${EC_SYS_PATH}/bin/ec/components/rdb/test/replay_functionalTests.q
    testNamespaces = .testRdb, .testReplay

# Test environment for rdb/rdb test
[group:t0]
  [[t0.rdb]]
    command = "q rdb.q"
    type = q:rdb/rdb
    port = ${basePort} + 1
    memCap = 10000
    libPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}, ${EC_SYS_PATH}/bin/ec/libraries/,${EC_SYS_PATH}/bin/ec/components/mock
    libs = rdbPluginMock.q

  [[t0.tickMock]] 
    command = "q tickHFMock.q"
    type = q:mock/tickHFMock
    port = ${basePort} + 2
    memCap = 5000

  [[t0.hdbMock]]
    command = "q hdbMock.q"
    type = q:mock/hdbMock
    port = ${basePort} + 3
    memCap = 10000

# Test environment for rdb/replay test
[group:t1]
  [[t1.replay]]
    command = "q replay.q"
    type = b:rdb/replay
    port = ${basePort} + 11
    memCap = 10000
    libPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}, ${EC_SYS_PATH}/bin/ec/libraries/,${EC_SYS_PATH}/bin/ec/components/mock

  [[t1.tickLF]] 
    command = "q tickLF.q"
    type = q:tickLF/tickLF
    port = ${basePort} + 12
    memCap = 5000

  [[t1.tick1]]
    command = "q tickHF.q"
    type = q:tickHF/tickHF
    port = ${basePort} + 13
    memCap = 5000

  [[t1.tick2]]
    command = "q tickHF.q"
    type = q:tickHF/tickHF
    port = ${basePort} + 14
    memCap = 5000

  [[t1.rdb1]]
    command = "q rdb.q"
    type = q:rdb/rdb
    port = ${basePort} + 15
    memCap = 10000
    libPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}, ${EC_SYS_PATH}/bin/ec/libraries/,${EC_SYS_PATH}/bin/ec/components/mock
    libs = rdbPluginMock.q

  [[t1.rdb2]]
    command = "q rdb.q"
    type = q:rdb/rdb
    port = ${basePort} + 16
    memCap = 10000

  [[t1.hdbMock]]
    command = "q hdbMock.q"
    type = q:mock/hdbMock
    port = ${basePort} + 17
    memCap = 10000

  [[t1.stream]]
    command = "q stream.q"
    type = q:stream/streamMrvs
    port = ${basePort} + 18
    memCap = 5000
